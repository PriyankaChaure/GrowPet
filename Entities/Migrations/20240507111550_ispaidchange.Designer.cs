// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(ContextClass))]
    [Migration("20240507111550_ispaidchange")]
    partial class ispaidchange
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("TblAdmin");

                    b.HasData(
                        new
                        {
                            AdminId = 1L,
                            Address = "Pune",
                            EmailId = "priya@gmail.com",
                            FirstName = "Priyanka",
                            LastName = "Chaure",
                            MobileNo = "9876543210",
                            Password = "1234"
                        });
                });

            modelBuilder.Entity("Core.Cart", b =>
                {
                    b.Property<long>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CartId"));

                    b.Property<DateTime>("CartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("TblCart");
                });

            modelBuilder.Entity("Core.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("TblCategory");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.Property<long>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("TblCity");
                });

            modelBuilder.Entity("Core.Complaint", b =>
                {
                    b.Property<long>("ComplaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ComplaintId"));

                    b.Property<DateTime>("ComplaintDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComplaintDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("ComplaintId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblComplaint");
                });

            modelBuilder.Entity("Core.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryId"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("TblCountry");
                });

            modelBuilder.Entity("Core.DispatchAgency", b =>
                {
                    b.Property<long>("DispatchAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DispatchAgencyId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DispatchAgencyId");

                    b.ToTable("TblDispatchAgency");
                });

            modelBuilder.Entity("Core.DispatchOrder", b =>
                {
                    b.Property<long>("DispatchOrederId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DispatchOrederId"));

                    b.Property<long>("DispatchAgencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocketNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedReachDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("DispatchOrederId");

                    b.HasIndex("DispatchAgencyId");

                    b.HasIndex("OrderId");

                    b.ToTable("TblDispatchOrder");
                });

            modelBuilder.Entity("Core.Offer", b =>
                {
                    b.Property<long>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OfferId"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("OfferId");

                    b.HasIndex("StoreId");

                    b.ToTable("TblOffer");
                });

            modelBuilder.Entity("Core.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Orderdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("TblOrder");
                });

            modelBuilder.Entity("Core.OrderDet", b =>
                {
                    b.Property<long>("OrderDetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderDetID"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetID");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblOrderDet");
                });

            modelBuilder.Entity("Core.OrderPayment", b =>
                {
                    b.Property<long>("OrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderPaymentId"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMode")
                        .HasColumnType("int");

                    b.HasKey("OrderPaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("TblOrderPayment");
                });

            modelBuilder.Entity("Core.OrderTax", b =>
                {
                    b.Property<long>("OrderTaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderTaxId"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("TaxId")
                        .HasColumnType("bigint");

                    b.HasKey("OrderTaxId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TaxId");

                    b.ToTable("TblOrderTax");
                });

            modelBuilder.Entity("Core.Pet", b =>
                {
                    b.Property<long>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetId"));

                    b.Property<long>("Age")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PetDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PetFamilyId")
                        .HasColumnType("bigint");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PetTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("PetId");

                    b.HasIndex("PetFamilyId");

                    b.HasIndex("PetTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblPet");
                });

            modelBuilder.Entity("Core.PetFamily", b =>
                {
                    b.Property<long>("PetFamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetFamilyId"));

                    b.Property<string>("PetFamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetFamilyId");

                    b.ToTable("TblPetFamily");
                });

            modelBuilder.Entity("Core.PetFood", b =>
                {
                    b.Property<long>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FoodId"));

                    b.Property<string>("FoodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GoodFoodAccordingToPetAge")
                        .HasColumnType("int");

                    b.Property<string>("MfgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("FoodId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblPetFood");
                });

            modelBuilder.Entity("Core.PetPhotos", b =>
                {
                    b.Property<long>("PetPhotosId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetPhotosId"));

                    b.Property<long>("PetId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetPhotosId");

                    b.HasIndex("PetId");

                    b.ToTable("TblPetPhotos");
                });

            modelBuilder.Entity("Core.PetProduct", b =>
                {
                    b.Property<long>("PetProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetProductId"));

                    b.Property<string>("MfgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblPetProduct");
                });

            modelBuilder.Entity("Core.PetType", b =>
                {
                    b.Property<long>("PetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PetTypeId"));

                    b.Property<string>("PetTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PetTypeId");

                    b.ToTable("TblPetType");
                });

            modelBuilder.Entity("Core.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductId"));

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("TblProduct");
                });

            modelBuilder.Entity("Core.ProductReview", b =>
                {
                    b.Property<long>("ProductReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductReviewId"));

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("ProductReviewId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("TblProductReview");
                });

            modelBuilder.Entity("Core.Refund", b =>
                {
                    b.Property<long>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RefundId"));

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ReturnId")
                        .HasColumnType("bigint");

                    b.HasKey("RefundId");

                    b.HasIndex("ReturnId");

                    b.ToTable("TblRefund");
                });

            modelBuilder.Entity("Core.Return", b =>
                {
                    b.Property<long>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReturnId"));

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReturnId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("TblReturn");
                });

            modelBuilder.Entity("Core.Solution", b =>
                {
                    b.Property<long>("SolutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SolutionId"));

                    b.Property<long>("ComplaintId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SolutionId");

                    b.HasIndex("ComplaintId");

                    b.ToTable("TblSolution");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.Property<long>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateId"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("TblState");
                });

            modelBuilder.Entity("Core.Store", b =>
                {
                    b.Property<long>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoreId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.HasIndex("CityId");

                    b.ToTable("TblStore");
                });

            modelBuilder.Entity("Core.StoreReview", b =>
                {
                    b.Property<long>("StoreReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StoreReviewId"));

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreReviewId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("TblStoreReview");
                });

            modelBuilder.Entity("Core.Tax", b =>
                {
                    b.Property<long>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaxId"));

                    b.Property<string>("HSNSACNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TaxId");

                    b.ToTable("TblTax");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.ToTable("TblUser");
                });

            modelBuilder.Entity("Core.Cart", b =>
                {
                    b.HasOne("Core.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Store", "Store")
                        .WithMany("Carts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.HasOne("Core.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.Complaint", b =>
                {
                    b.HasOne("Core.Order", "Orders")
                        .WithMany("Complaints")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Product", "Product")
                        .WithMany("Complaints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.DispatchOrder", b =>
                {
                    b.HasOne("Core.DispatchAgency", "DispatchAgency")
                        .WithMany("DispatchOrders")
                        .HasForeignKey("DispatchAgencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Order", "Orders")
                        .WithMany("DispatchOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DispatchAgency");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.Offer", b =>
                {
                    b.HasOne("Core.Store", "Store")
                        .WithMany("Offers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Core.Order", b =>
                {
                    b.HasOne("Core.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.OrderDet", b =>
                {
                    b.HasOne("Core.Order", "Orders")
                        .WithMany("OrderDets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Product", "Product")
                        .WithMany("OrderDets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.OrderPayment", b =>
                {
                    b.HasOne("Core.Order", "Orders")
                        .WithMany("OrderPayment")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.OrderTax", b =>
                {
                    b.HasOne("Core.Order", "Orders")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Tax", "Tax")
                        .WithMany("OrderTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Core.Pet", b =>
                {
                    b.HasOne("Core.PetFamily", "PetFamily")
                        .WithMany("Pets")
                        .HasForeignKey("PetFamilyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.PetType", "PetType")
                        .WithMany("Pets")
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Product", "Product")
                        .WithMany("Pets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PetFamily");

                    b.Navigation("PetType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.PetFood", b =>
                {
                    b.HasOne("Core.Product", "Product")
                        .WithMany("PetFood")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.PetPhotos", b =>
                {
                    b.HasOne("Core.Pet", "Pet")
                        .WithMany("PetPhotos")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Core.PetProduct", b =>
                {
                    b.HasOne("Core.Product", "Product")
                        .WithMany("PetProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Product", b =>
                {
                    b.HasOne("Core.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Core.ProductReview", b =>
                {
                    b.HasOne("Core.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("ProductReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Refund", b =>
                {
                    b.HasOne("Core.Return", "Return")
                        .WithMany("Refunds")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Core.Return", b =>
                {
                    b.HasOne("Core.Order", "Orders")
                        .WithMany("Returns")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Product", "Product")
                        .WithMany("Returns")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Solution", b =>
                {
                    b.HasOne("Core.Complaint", "Complaints")
                        .WithMany("Solutions")
                        .HasForeignKey("ComplaintId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.HasOne("Core.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Store", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany("Stores")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.StoreReview", b =>
                {
                    b.HasOne("Core.Store", "Store")
                        .WithMany("StoreReviews")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.User", "User")
                        .WithMany("StoreReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.HasOne("Core.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.City", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Complaint", b =>
                {
                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("Core.Country", b =>
                {
                    b.Navigation("State");
                });

            modelBuilder.Entity("Core.DispatchAgency", b =>
                {
                    b.Navigation("DispatchOrders");
                });

            modelBuilder.Entity("Core.Order", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("DispatchOrders");

                    b.Navigation("OrderDets");

                    b.Navigation("OrderPayment");

                    b.Navigation("OrderTaxes");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("Core.Pet", b =>
                {
                    b.Navigation("PetPhotos");
                });

            modelBuilder.Entity("Core.PetFamily", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.PetType", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("Core.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Complaints");

                    b.Navigation("OrderDets");

                    b.Navigation("PetFood");

                    b.Navigation("PetProducts");

                    b.Navigation("Pets");

                    b.Navigation("ProductReviews");

                    b.Navigation("Returns");
                });

            modelBuilder.Entity("Core.Return", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Core.State", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("Core.Store", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Offers");

                    b.Navigation("Orders");

                    b.Navigation("Products");

                    b.Navigation("StoreReviews");
                });

            modelBuilder.Entity("Core.Tax", b =>
                {
                    b.Navigation("OrderTaxes");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("ProductReviews");

                    b.Navigation("StoreReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
